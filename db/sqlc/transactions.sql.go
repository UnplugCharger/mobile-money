// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: transactions.sql

package db

import (
	"context"
	"database/sql"
)

const createTransaction = `-- name: CreateTransaction :one
insert into transactions (
from_user,
to_user,
amount
) values (
$1,$2,$3
) returning id, payment_id, payment_type, amount, from_user, to_user
`

type CreateTransactionParams struct {
	FromUser int64         `json:"from_user"`
	ToUser   int64         `json:"to_user"`
	Amount   sql.NullInt64 `json:"amount"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction, arg.FromUser, arg.ToUser, arg.Amount)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.PaymentType,
		&i.Amount,
		&i.FromUser,
		&i.ToUser,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
select id, payment_id, payment_type, amount, from_user, to_user from transactions where id = $1
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.PaymentID,
		&i.PaymentType,
		&i.Amount,
		&i.FromUser,
		&i.ToUser,
	)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
select id, payment_id, payment_type, amount, from_user, to_user from transactions where from_user = $1 or to_user = $2 order by created_at desc limit $3 offset $4
`

type ListTransactionsParams struct {
	FromUser int64 `json:"from_user"`
	ToUser   int64 `json:"to_user"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListTransactions(ctx context.Context, arg ListTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions,
		arg.FromUser,
		arg.ToUser,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.PaymentID,
			&i.PaymentType,
			&i.Amount,
			&i.FromUser,
			&i.ToUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
